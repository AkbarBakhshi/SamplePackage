getwd()
getwd()
hello <- function() {
print("Hello, world!")
}
install.packages('roxygen2')
library('roxygen2')
create()
detach('roxygen2')
detach('roxygen2')
library(quantmod)
symbol<-'AAPL'
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
View(data)
View(data)
colnames(data)
dput(colnames(data))
#Importing price data for the given symbol
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 'up', 'down'))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
colnames(data)
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-lm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
model<-lm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year,
data=train)
str(train)
model
model<-lm(up_down~
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
model<-lm(up_down~Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
data$up_down <- as.numeric(ifelse(data[,tommorow] > data[,today], 'up', 'down'))
str(train)
predict(model,test)
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
,family=binomial(link='logit'),data=train)
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 'up', 'down'))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
,family=binomial(link='logit'),data=train)
str(train)
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
,data=train)
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year,
,family=binomial(link='logit'),data=train)
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year,
family=binomial,data=train)
train$up_down<-as.numeric(train$up_down)
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
train$up_down<-train$up_down-1
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
#Training models
model<-glm.fit(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family='binomial',data=train)
model<-glm.fit(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 'up', 'down'))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
rf_model<-randomForest(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
library(randomForest)
rf_model<-randomForest(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.5+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
predict(rf_model,test)
predict(rf_model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.5','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')])
sum(is.na(test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.5','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')]))
sum(is.na(test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')]))
predict(rf_model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')])
rf_model<-randomForest(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
predict(rf_model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')])
predict(rf_model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type='prob')
rf_model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
rf_model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
data=train)
rf_model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,family = binomial
data=train)
rf_model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,family = binomial
,data=train)
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
model
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type='prob')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')])
str(train)
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.numeric(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial,data=train)
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')])
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type='response')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type='response')
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type='response')
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type='response')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'terms')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'prob')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'link')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response')
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')])
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response')
stock_predict<-function(symbol)
{
#Importing price data for the given symbol
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
}
predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response')
stock_predict<-function(symbol)
{
#Importing price data for the given symbol
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
pred<-predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response')
print("Probability of Stock price going up tommorow:")
print(pred)
}
stock_predict('AAPL')
pred<-predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response')
pred
as.numeric(pred)
pred<-as.numeric(predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response'))
print("Probability of Stock price going up tommorow:")
print(pred)
stock_predict<-function(symbol)
{
#Importing price data for the given symbol
data<-data.frame(as.xts(get(getSymbols(symbol))))
#Assighning the column names
colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")
#Creating lag and lead features of price column.
data <- xts(data,order.by=as.Date(rownames(data)))
data <- as.data.frame(merge(data, lm1=lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))
#Extracting features from Date
data$Date<-as.Date(rownames(data))
data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
data$Year<-as.integer(format(as.Date(data$Date),"%y"))
data$Day_of_week<-as.factor(weekdays(data$Date))
#Naming variables for refrence
today <- 'data.Adjusted'
tommorow <- 'data.Adjusted.5'
#Creating outcome
data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))
#Creating train and test sets
train<-data[complete.cases(data),]
test<-data[nrow(data),]
#Training models
model<-glm(up_down~data.Open+data.High+data.Low+data.Close+
data.Volume+data.Adjusted+data.Adjusted.1+
data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
Day_of_month+Month_of_year+Year+Day_of_week,
family=binomial(link='logit'),data=train)
pred<-as.numeric(predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response'))
print("Probability of Stock price going up tommorow:")
print(pred)
}
stock_predict('AAPL')
stock_predict('GOGL')
stock_predict('AMZ')
stock_predict('AMZN')
stock_predict('PKI')
stock_predict('GOGL')
rm(list=ls())
library(StockPredictoR)
library(StockPredictoR)
install.packages('quantmod')
install.packages("quantmod")
install.packages("knitr")
library(StockPredictoR)
example(StockPredictoR)
examples(StockPredictoR)
example(StockPredictoR)
stock_predict('GOOGL')
example("stock_predict")
library(StockPredictoR)
example("stock_predict")
stock_predict('GOOGL')
stock_predict('AMZN')
stock_predict('YHOO ')
stock_predict('YHOO')
stock_predict('MCD')
stock_predict('FB')
stock_predict('TWTR')
stock_predict('GOGL')
stock_predict('GOOGL')
library(StockPredictoR)
library(StockPredictoR)
example("stock_predict")
stock_predict('GOOGL')
library(StockPredictoR)
